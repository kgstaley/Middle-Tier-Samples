        public bool PhoneExists(string phoneNumber, int userId)
        {
            UserProfile userProfile = null;
            bool phoneExists = false;
            _dataProvider.ExecuteCmd("dbo.UserProfiles_CheckPhoneInDB", (parameters) =>
            {
                parameters.AddWithValue("@PhoneNumber", phoneNumber);
                parameters.AddWithValue("@UserId", userId);
            },
            (reader, setRecordIndex) =>
            {
                userProfile = PhoneMapper(reader);
                phoneExists = true;
            }
            );
            return phoneExists;
        }

        public string UpdatePhone(UserProfilesUpdatePhoneRequest model, int userId, string smsToken)
        {
            _dataProvider.ExecuteNonQuery("dbo.UserProfiles_UpdatePhoneNumber", (parameters) =>
            {
                parameters.AddWithValue("@PhoneNumber", model.PhoneNumber);
                parameters.AddWithValue("@UserId", userId);
                parameters.AddWithValue("@SmsToken", smsToken);
            });
            return smsToken;
        }

        public void ClearPhoneAndSmsToken(int userId)
        {
            _dataProvider.ExecuteNonQuery("dbo.UserProfiles_ClearPhoneAndSmsToken", (parameters) =>
            {
                parameters.AddWithValue("@UserId", userId);
            });
        }

        public bool VerifyConfirmPhone(string smsToken, int userId)
        {
            bool verifiedPhone = false;
            _dataProvider.ExecuteNonQuery("dbo.UserProfiles_VerifySmsToken", (parameters) =>
            {
                parameters.AddWithValue("@SmsToken", smsToken);
                parameters.AddWithValue("@UserId", userId);
            }, (returnParams) =>
            {
                verifiedPhone = true;
            });
            return verifiedPhone;
        }

        public bool UnverifyConfirmPhone(string smsToken, int userId)
        {
            bool unverifiedPhone = false;
            _dataProvider.ExecuteNonQuery("dbo.UserProfiles_UnverifySmsToken", (parameters) =>
            {
                parameters.AddWithValue("@SmsToken", smsToken);
                parameters.AddWithValue("@UserId", userId);
            },
            (returnParams) =>
            {
                unverifiedPhone = true;
            });
            return unverifiedPhone;
        }
